-*- Text -*-

Interactive user-updatable web pages a la wiki (http://www.c2.com/cgi/wiki)

This file is slowly going away as its content goes into the live CLiki
at http://ww.telent.net/cliki/

* Content domain

The immediate use of the application will be as a tool to maintain an
information repository about Lisp and Scheme-based tools that aid with
web applications in one way or another

* Page Viewing/Editing

- Accept (subset of) HTML, with extra markup conveniences.

- Internal link syntax is _(link to me) (as opposed to wiki's
LinkToMe; StudlyCaps don't go well with lisp).  Spaces and underscores
are interchangeable: "Foo_Bar" and "Foo%20Bar" refer to the same page
(after all, we don't bother with underscores in lisp much either).  We
may attempt to turn A HREF links that we know about into _( ) form
when accepting the edited page.

- *( ... ) is a category marker: see section on searching

- Special "quote" (haha) syntax to indicate inline and display-mode code
inserts; ideally using separators that won't conflict with the code
itself

'((cl :mode :display)
(defun foo (x) 
  (* x 2))
)

'((scheme :mode :inline)
(define (foo x)
  (* 2 x))
)

Intervening code will be pretty-printed in the appropriate language.
For extra points, CL symbols could be HyperSpec links etc etc.

- Searches:

/(search-term &key (attribute :body) (match :substring) (case-sensitive nil))

attribute is (or :title :topic :body)
match is (or :exact :substring :regular-expression)
case-sensitive is (or t nil)

All this should be fairly self-explanatory.  Results are displayed
as 

(ul
 (li ((a :href "foo") "foo"))
 (li ((a :href "bar") "bar"))
 (li ((a :href "baz") "baz")))

but fancier formatting is a goal for the future

If people want to pin the search result and turn the thing into a static
page, they can cut & paste from "View source"

* Navigation architecture

There are two basic models for web information repositories: the
directory (classic example: Yahoo) and the stew with a search
interface (google).  Hierarchies are for browsers - people who don't
already know what they're looking for, or who need to be convinced
that the repository contains any useful information about what they're
looking for.  Stews are for searchers - people who know what they want
and who think we have it.

The world is more of a Whole Sort Of General Mishmash than a
hierarchy, however, so we don't _keep_ stuff in a hierarchy, we keep
it in a stew: arbitrary hierarchies composed of document searches can
be layered on top of it for a given purpose.

So, the content of a document defines where and whether it appears in
a given hierarchy.  The CMUCL page needs to represent that it's a
CL implementation; Araneida needs to represent that it works with
CMUCL.

* Topics (or Categories, or Keywords)

There are two parts to topic support: 

- allow a page to declare relevance to a topic

*(CMUCL) => "this is a page about CMUCL"

- create a summary page with links to all relevant pages

The page would usually have the same name as the topic, so that
relevance declarations can be rendered as links to the summary page.
It consists of the search results for all relevant pages, plus
optional arbitrary content.  The CMUCL page might contain

/(CMUCL :attribute :topic)

* Searching the stew

* Implementation decisions

How to store pages: stick them in the filesystem with names like their
titles.  Read them from disk and do markup at display time.

Use araneida 

One handler for "view" method, another for "edit"

* To think about later

Idea: What mileage do we get from allowing sexpual input in the first
place?  Limited until motif textareas gain the ability to match
parens.  But it will happen eventually - given which, do we have to
interpret the page every time, or can we somehow "compile" it?

VC would be nice, chiefly for  the ability to do a "blame" view of the
document where different authors or different revisions could show up
in different colours
